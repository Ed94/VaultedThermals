/*
Vaulted Thermals: Vault Definitions

To enable a level implementation, create a macro definition:
#define VaultedThermals_Open_Vault_VaultDesignator

Vaults (Designator):
MagmaChamber
Vault_00
Vault_01
Vault_02
Vault_03
Vault_04
Vault_05
Vault_06
Vault_07
Vault_08
Vault_09
Vault_10

Important: Higher numbered vaults may require a lower level vault to be opened. 
If the vault is not open, it will define the open definition itself implicitly.

Opening the MagmaChamber vault is unique int that it affects all other vaults.
When opened, the definition will change the loader interfaced with for all the implementation
in the other vaults to the loader generated by the MagmaChamber vault.

Note: All non-vaulted implementation is in the Attic.
*/



#pragma once



namespace Vulkan
{
	/*
	Contains meta stuff thats platform specifics etc.
	*/
	inline namespace Attic
	{

	}

	/*
	TODO: Look into possibly implementing with the volk library.

	Meta-Loading Setup

	When the heat at the control gate isn't enough. 
	*/
	namespace Vault_MagmaChamber {}

	/*
		BackEnd vault for VaultedThermals

		For now only abstracts away OS Platform details and basic meta-structure definitions
	*/
	namespace Vault_00 {}

	/*
		1:1 Wrapping of Vulkan API
	*/
	namespace Vault_01 {}

	/*
		Low cost procedural repetitive functionality wrapping.
	*/
	namespace Vault_02 {}

	/*
		Medium cost procedural, preset implementation wrapping.
	*/
	namespace Vault_03 {}

	/*
		Full setup providing procedure implementation.

		(Will have its own device references, queues, layers, etc.)
	*/
	namespace Vault_04 {}

	/*
		1:1 Object oriented wrapping of Vulkan API
	*/
	namespace Vault_05 {}

	/*
		Low cost Object-oriented repetitive functionality wrapping.
	*/
	namespace Vault_06 {}

	/*
		Medium cost Object-oriented preset implementation wrapping.
	*/
	namespace Vault_07 {}

	/*
		Full setup providing object-oriented implementation.
	*/
	namespace Vault_08 {}

	/*
	Reserved
	*/
	namespace Vault_09 {}

	/*
	Reserved
	*/
	namespace Vault_10 {}
}
