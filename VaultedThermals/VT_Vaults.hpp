/** 
@file VT_Vaults.hpp

@brief Vaulted Thermals: Vault Definitions

@details

Vaults (Designator):
MagmaChamber
Vault_0
Vault_1
Vault_2
Vault_3
Vault_4
Vault_5
Vault_6
Vault_7


Important: Higher numbered vaults may require a lower level vault to be opened. 
If the vault is not open, it will define the open definition itself implicitly.

Opening the MagmaChamber vault is unique int that it affects all other vaults.
When opened, the definition will change the loader interfaced with for all the implementation
in the other vaults to the loader generated by the MagmaChamber vault.
Define macro: VT_Vault_MagmaChamber_Open if you want this. [Note: Currently not implemented]

Note: Vaults 3 and 7 must be opened before use (see macro definitions for opening). 
This is due to their implementation making use of static or dynamic object allocations. 
If the vaults are not properly opened all that will exist within them is a namespace called: Vault_Closed.

Vault 4 Open Macro: #define VT_Vault_3_Open
Vault 8 Open Macro: #define VT_Vault_7_Open
*/



#pragma once



#ifndef VT_Option__Use_Short_Namespace
	namespace VaultedThermals
#else
	namespace VT
#endif
{
	/** @namespace Corridors

		@brief Contains shared definitions between the vaults.
	*/
	namespace Corridors {}

	/** @namespace Vault_MagmaChamber

		@todo Look into possibly implementing with the Volk library.

		@brief Meta-Loading Setup.

		@details When the heat at the control gate isn't enough. 
	*/
	namespace Vault_MagmaChamber {}

	/** @namespace Vault_0

		@brief Backend vault for VaultedThermals

		@details For now only abstracts away OS Platform details and basic meta-structure definitions.
	*/
	namespace Vault_0 { using namespace Corridors; }

	/** @namespace Vault_1
	*
	*	@brief 1:1 Wrapping of Vulkan API
	*/
	namespace Vault_1 { using namespace Corridors; }

	/** @namespace Vault_2

		@brief Repetitive functionality wrapping.
	*/
	namespace Vault_2 { using namespace Corridors; }

	/** @namespace Vault_3

		@brief Full setup providing procedure implementation.

		@details (Will have its own device references, queues, layers, etc.)
	*/
	namespace Vault_3 
	{
	#ifndef VT_Vault_3_Open
		namespace Vault_Closed {}
	#endif

	#ifdef VT_Vault_3_Open
		using namespace Corridors; 
	#endif
	}

	/** @namespace Vault_4
		
		@brief Object-oriented wrapping
	*/
	namespace Vault_4 { using namespace Corridors; }

	/** @namespace Vault_5

	*/
	namespace Vault_5 { using namespace Corridors; }

	/** @namespace Vault_6
	*/
	namespace Vault_7
	{ 
	#ifndef VT_Vault_7_Open
		namespace Vault_Closed {}
	#endif

	#ifdef VT_Vault_7_Open
		using namespace Corridors;
	#endif
	}
}
